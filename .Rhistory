foldchange_est <- foldchange(
titers1 = titers1,
titers2 = titers2,
...
)
# Impute the foldchange
imputed_foldchange <- gmt_impute_foldchange(
result = foldchange_est,
titers1 = titers1,
titers2 = titers2
)
# Plot the histogram
tibble::tibble(
foldchange = as.vector(imputed_foldchange),
censoring = attr(imputed_foldchange, "censoring")
) %>%
dplyr::filter(
!is.na(foldchange)
) %>%
ggplot2::ggplot(
ggplot2::aes(
x = foldchange,
fill = censoring
)
) +
ggplot2::geom_histogram(
binwidth = binwidth
)
}
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
logtiters1 <- t(logtiterTable(map)[c("D614G"), ])
logtiters2 <- t(logtiterTable(map)[c("B.1.351"), ])
logtiterTable(map)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
hist(logtiters2 - logtiters1)
hist(logtiters2 - logtiters1, 30)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
srGroups(map)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-plotting.R")
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
titers1
# rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
map <- read.acmap("~/Dropbox/labbook/publications/in review/duke-sars2-cartography-paper/data/map_ndsubset_no_outliers.ace")
titers <- t(titerTable(map)[c("B.1.351", "P.1"), srGroups(map) == "D614G"])
titers1 <- t(titerTable(map)[c("D614G", "B.1.1.7"), srGroups(map) == "D614G"])
titers2 <- t(titerTable(map)[c("B.1.351"), srGroups(map) == "D614G"])
rm(list = ls())
library(Racmacs)
# rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
map <- read.acmap("~/Dropbox/labbook/publications/in review/duke-sars2-cartography-paper/data/map_ndsubset_no_outliers.ace")
titers <- t(titerTable(map)[c("B.1.351", "P.1"), srGroups(map) == "D614G"])
titers1 <- t(titerTable(map)[c("D614G", "B.1.1.7"), srGroups(map) == "D614G"])
titers2 <- t(titerTable(map)[c("B.1.351"), srGroups(map) == "D614G"])
titers1
titers2
titers1
titers1 <- t(titerTable(map)[c("D614G", "B.1.1.7"), srGroups(map) == "D614G"], drop = F)
titers2 <- t(titerTable(map)[c("B.1.351"), srGroups(map) == "D614G"], drop = F)
titers1 <- t(titerTable(map)[c("D614G", "B.1.1.7"), srGroups(map) == "D614G", drop = F])
titers2 <- t(titerTable(map)[c("B.1.351"), srGroups(map) == "D614G", drop = F])
titers1
titers2
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
matrix(seq_len(ncol(titers1)), nrow(titers1), ncol(titers1), byrow = T)
ag12 <- cbind(
matrix(1, nrow(titers1), ncol(titers1)),
matrix(2, nrow(titers2), ncol(titers2))
)
ag12
titers <- cbind(titers1, titers2)
titers
titers <- cbind(titers1, titers2)
ag12 <- cbind(
matrix(1, nrow(titers1), ncol(titers1)),
matrix(2, nrow(titers2), ncol(titers2))
)
ag_num <- matrix(seq_len(ncol(titers)), nrow(titers), ncol(titers), byrow = T)
sr_num <- matrix(seq_len(nrow(titers)), nrow(titers), ncol(titers), byrow = F)
ag_num
sr_num
na_titers <- is_na_titer(titers)
na_titers
# Calculate titer limits
titerlims <- calc_titer_lims(
titers = titers,
dilution_stepsize = 1
)
# Setup data
standata <- list(
N                     = sum(!na_titers),
N_ags                 = ncol(titers),
N_srs                 = nrow(titers),
upper_lims            = titerlims$max_titers[!na_titers],
lower_lims            = titerlims$min_titers[!na_titers],
ag                    = as.vector(ag_num)[!na_titers],
sr                    = as.vector(sr_num)[!na_titers],
ag12                  = as.vector(ag12)[!na_titers],
ags1_mu_prior_mu      = 0,
ags1_mu_prior_sigma   = 100,
sigma_prior_alpha     = 2,
sigma_prior_beta      = 5,
sigma_prior_ag_effect = 0.7,
sr_logdiffs_mu        = 0,
sr_logdiffs_sigma     = 100
)
mean(titerlims$log_titers[!na_titers & ag12 == 1])
mean(titerlims$log_titers[!na_titers & ag12 == 2])
# Setup data
standata <- list(
N                     = sum(!na_titers),
N_ags                 = ncol(titers),
N_srs                 = nrow(titers),
upper_lims            = titerlims$max_titers[!na_titers],
lower_lims            = titerlims$min_titers[!na_titers],
ag                    = as.vector(ag_num)[!na_titers],
sr                    = as.vector(sr_num)[!na_titers],
ag12                  = as.vector(ag12)[!na_titers],
ags1_mu_prior_mu      = 0,
ags1_mu_prior_sigma   = 100,
sigma_prior_alpha     = 2,
sigma_prior_beta      = 5,
sigma_prior_ag_effect = 0.7,
sr_logdiffs_mu        = 0,
sr_logdiffs_sigma     = 100
)
# Set initial conditions
ag1_mu_init <- mean(titerlims$log_titers[!na_titers & ag12 == 1])
ag2_mu_init <- mean(titerlims$log_titers[!na_titers & ag12 == 2])
initdata <- list(
ags1_mu     = ag1_mu_init,
sigma       = sd(titerlims$log_titers[!na_titers]),
ag_effects  = rep(0, ncol(titers1)),
sr_logdiffs = rep(ag2_mu_init - ag1_mu_init, nrow(titers1))
)
# Optimize parameters
result <- rstan::optimizing(
stanmodels$logdiff_unpaired_me,
data = standata,
init = initdata,
hessian = TRUE
)
rep(0, ncol(titers1))
initdata <- list(
ags1_mu     = ag1_mu_init,
sigma       = sd(titerlims$log_titers[!na_titers]),
ag_effects  = rep(0, ncol(titers)),
sr_logdiffs = rep(ag2_mu_init - ag1_mu_init, nrow(titers))
)
# Optimize parameters
result <- rstan::optimizing(
stanmodels$logdiff_unpaired_me,
data = standata,
init = initdata,
hessian = TRUE
)
names(result$par)
calc_confint(
result = result,
standata = standata,
model = stanmodels$gmt_me,
pars = names(result$par),
method = ci_method,
level = ci_level,
options = options
)
# Setup data
standata <- list(
N                     = sum(!na_titers),
N_ags                 = ncol(titers),
N_srs                 = nrow(titers),
upper_lims            = titerlims$max_titers[!na_titers],
lower_lims            = titerlims$min_titers[!na_titers],
ag                    = as.vector(ag_num)[!na_titers],
sr                    = as.vector(sr_num)[!na_titers],
ag12                  = as.vector(ag12)[!na_titers],
ags1_mu_prior_mu      = 0,
ags1_mu_prior_sigma   = 100,
sigma_prior_alpha     = 2,
sigma_prior_beta      = 5,
sigma_prior_ag_effect = 0.00000001,
sr_logdiffs_mu        = 0,
sr_logdiffs_sigma     = 100
)
# Set initial conditions
ag1_mu_init <- mean(titerlims$log_titers[!na_titers & ag12 == 1])
ag2_mu_init <- mean(titerlims$log_titers[!na_titers & ag12 == 2])
initdata <- list(
ags1_mu     = ag1_mu_init,
sigma       = sd(titerlims$log_titers[!na_titers]),
ag_effects  = rep(0, ncol(titers)),
sr_logdiffs = rep(ag2_mu_init - ag1_mu_init, nrow(titers))
)
# Optimize parameters
result <- rstan::optimizing(
stanmodels$logdiff_unpaired_me,
data = standata,
init = initdata,
hessian = TRUE
)
calc_confint(
result = result,
standata = standata,
model = stanmodels$gmt_me,
pars = names(result$par),
method = ci_method,
level = ci_level,
options = options
)
# Setup data
standata <- list(
N                     = sum(!na_titers),
N_ags                 = ncol(titers),
N_srs                 = nrow(titers),
upper_lims            = titerlims$max_titers[!na_titers],
lower_lims            = titerlims$min_titers[!na_titers],
ag                    = as.vector(ag_num)[!na_titers],
sr                    = as.vector(sr_num)[!na_titers],
ag12                  = as.vector(ag12)[!na_titers],
ags1_mu_prior_mu      = 0,
ags1_mu_prior_sigma   = 100,
sigma_prior_alpha     = 2,
sigma_prior_beta      = 5,
sigma_prior_ag_effect = 0.0001,
sr_logdiffs_mu        = 0,
sr_logdiffs_sigma     = 100
)
# Set initial conditions
ag1_mu_init <- mean(titerlims$log_titers[!na_titers & ag12 == 1])
ag2_mu_init <- mean(titerlims$log_titers[!na_titers & ag12 == 2])
initdata <- list(
ags1_mu     = ag1_mu_init,
sigma       = sd(titerlims$log_titers[!na_titers]),
ag_effects  = rep(0, ncol(titers)),
sr_logdiffs = rep(ag2_mu_init - ag1_mu_init, nrow(titers))
)
# Optimize parameters
result <- rstan::optimizing(
stanmodels$logdiff_unpaired_me,
data = standata,
init = initdata,
hessian = TRUE
)
calc_confint(
result = result,
standata = standata,
model = stanmodels$gmt_me,
pars = names(result$par),
method = ci_method,
level = ci_level,
options = options
)
# Setup data
standata <- list(
N                     = sum(!na_titers),
N_ags                 = ncol(titers),
N_srs                 = nrow(titers),
upper_lims            = titerlims$max_titers[!na_titers],
lower_lims            = titerlims$min_titers[!na_titers],
ag                    = as.vector(ag_num)[!na_titers],
sr                    = as.vector(sr_num)[!na_titers],
ag12                  = as.vector(ag12)[!na_titers],
ags1_mu_prior_mu      = 0,
ags1_mu_prior_sigma   = 100,
sigma_prior_alpha     = 2,
sigma_prior_beta      = 5,
sigma_prior_ag_effect = 0.7,
sr_logdiffs_mu        = 0,
sr_logdiffs_sigma     = 100
)
# Set initial conditions
ag1_mu_init <- mean(titerlims$log_titers[!na_titers & ag12 == 1])
ag2_mu_init <- mean(titerlims$log_titers[!na_titers & ag12 == 2])
initdata <- list(
ags1_mu     = ag1_mu_init,
sigma       = sd(titerlims$log_titers[!na_titers]),
ag_effects  = rep(0, ncol(titers)),
sr_logdiffs = rep(ag2_mu_init - ag1_mu_init, nrow(titers))
)
# Optimize parameters
result <- rstan::optimizing(
stanmodels$logdiff_unpaired_me,
data = standata,
init = initdata,
hessian = TRUE
)
calc_confint(
result = result,
standata = standata,
model = stanmodels$gmt_me,
pars = names(result$par),
method = ci_method,
level = ci_level,
options = options
)
x <- names(result$par)
calc_confint(
result = result,
standata = standata,
model = stanmodels$gmt_me,
pars = names(result$par),
method = ci_method,
level = ci_level,
options = options
) -> x
x
round(x, 3)
titers1
titers2
titers1 <- t(titerTable(map)[c("D614G", "B.1.1.7"), srGroups(map) == "D614G", drop = F])
titers2 <- t(titerTable(map)[c("B.1.351", "P.1"), srGroups(map) == "D614G", drop = F])
# result <- gmt(titers1[,1], ci_method = "ETI")
result <- log2diff_unpaired_me(titers1, titers2, ci_method = "quap")
devtools::load_all()
# result <- gmt(titers1[,1], ci_method = "ETI")
result <- log2diff_unpaired_me(titers1, titers2, ci_method = "quap")
devtools::load_all()
# result <- gmt(titers1[,1], ci_method = "ETI")
result <- log2diff_unpaired_me(titers1, titers2, ci_method = "quap")
result
result[,"estimate"]
# result <- gmt(titers1[,1], ci_method = "ETI")
result <- log2diff_unpaired_me(titers1, titers2, ci_method = "ETI")
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
result$par
names(result$par)
calc_confint(
result = result,
standata = standata,
model = stanmodels$logdiff_unpaired_me,
pars = names(result$par),
method = ci_method,
level = ci_level,
options = options
)
result
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
rstan::extract(result_sampling)
?rstan::extract
rstan::extract(result_sampling, pars = par)
rstan::extract(result_sampling, pars = par)[[1]]
par_sample <- rstan::extract(result_sampling, pars = par)[[1]]
par_ci <- bayestestR::ci(par_sample, ci = level, method = method)
par_ci
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
result
devtools::load_all()
devtools::install()
library(titertools)
library(titertools)
devtools::install()
devtools::install()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
pmin(0, 0.1)
gmt(c("40" "*"))
gmt(c("40", "*"))
devtools::load_all()
gmt(c("40", "*"))
initdata
pmax(sd(titerlims$log_titers), 0.1, na.rm = T)
devtools::load_all()
gmt(c("40", "*"))
devtools::load_all()
gmt(c("40", "*"))
standata
initdata
# Optimize parameters
result <- rstan::optimizing(
stanmodels$gmt,
data = standata,
init = initdata,
hessian = TRUE
)
initdata
standata
calc_titer_lims(titers, 0)
calc_titer_lims(c("10", "10"), 0)
calc_titer_lims(c("10", "10"), 0)$max_titers
initdata
standata
# Optimize parameters
standata$lower_lims <- c(2, 2)
standata$upper_lims <- c(2, 2)
result <- rstan::optimizing(
stanmodels$gmt,
data = standata,
init = initdata,
hessian = TRUE
)
# Optimize parameters
standata$lower_lims <- 2
standata$upper_lims <- 2
standata$lower_lims
standata
# Optimize parameters
standata$lower_lims <- 2
standata$upper_lims <- 2
result <- rstan::optimizing(
stanmodels$gmt,
data = standata,
init = initdata,
hessian = TRUE
)
standata
initdata
standata
standata$upper_lims
is.vector(standata$upper_lims)
# Optimize parameters
standata$lower_lims <- as.list(2)
standata$upper_lims <- as.list(2)
result <- rstan::optimizing(
stanmodels$gmt,
data = standata,
init = initdata,
hessian = TRUE
)
# Optimize parameters
standata$lower_lims <- as.vector(2)
standata$upper_lims <- as.vector(2)
result <- rstan::optimizing(
stanmodels$gmt,
data = standata,
init = initdata,
hessian = TRUE
)
as.array(titerlims$max_titers)
as.array(1:2)
devtools::load_all()
gmt(c("40", "*"))
gmt(c("40"))
devtools::load_all()
devtools::load_all()
gmt(c("40"))
devtools::install(build = FALSE)
devtools::install(build = FALSE)
devtools::load_all()
devtools::load_all()
devtools::install(build = FALSE)
devtools::load_all()
devtools::load_all()
devtools::install(build = FALSE)
cbind(2, NA, NA)
gmt("*")
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
result$par
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
result
pars
devtools::load_all()
gmt(c("40", "*"))
gmt("*")
gmt_me(titers1)
titers_na <- titers1
titers_na[] <- NA
gmt_me(titers_na)
titers_na
titers_na <- titers1
titers_na[] <- "*"
gmt_me(titers_na)
titers_na
devtools::load_all()
gmt_me(titers_na)
seq_len(ncol(titers))
sprintf("ag_effects[%s]", seq_len(ncol(titers)))
matrix(
NA_real_, 2 + ncol(titers) + nrow(titers), 3,
dimnames = list(
c("mean", "sd", sprintf("ag_effects[%s]", seq_len(ncol(titers))), sprintf("sr_effects[%s]", seq_len(nrow(titers)))),
c("estimate", "lower", "upper")
)
)
devtools::load_all()
gmt_me(titers_na)
devtools::install(build = FALSE)
