2^-10
exp(10)
exp(-10)
rstantools::rstan_config()
pkgbuild::compile_dll()
roxygen2::roxygenise()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
titerlims <- calc_titer_lims(titers, 0)
titerlims
titers
standata <- list(
upper_lims = titerlims$max_titers,
lower_lims = titerlims$min_titers,
N = length(titerlims$max_titers)
)
rstan::optimizing(stanmodels$gmt, data = standata)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
?rstan::optimizing
titerlims$log_titers
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
initdata
upper_lims
lower_lims
length(upper_lims)
rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
rstan::optimizing(stanmodels$gmt, data = standata, init = list(initdata))
rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
rstan::sampling(stanmodels$gmt, data = standata)
upper_lims
standata <- list(
upper_lims = upper_lims,
lower_lims = upper_lims,
N = length(upper_lims)
)
initdata <- list(
mu = mean(titerlims$log_titers),
sigma = sd(titerlims$log_titers)
)
rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
standata <- list(
upper_lims = upper_lims,
lower_lims = lower_lims,
N = length(upper_lims)
)
rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
standata <- list(
upper_lims = lower_lims,
lower_lims = upper_lims,
N = length(upper_lims)
)
rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
standata <- list(
upper_lims = upper_lims,
lower_lims = upper_lims,
N = length(upper_lims)
)
rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
mean(titerlims$max_titers)
sd(titerlims$max_titers)
rstantools::rstan_config(); pkgbuild::compile_dll();
rstantools::rstan_config(); pkgbuild::compile_dll();
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
# rstan::sampling(stanmodels$gmt, data = standata)
rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
initdata
rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
lower_lims
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
# rstan::sampling(stanmodels$gmt, data = standata)
rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
# rstan::sampling(stanmodels$gmt, data = standata)
rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
lower_lims
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
limit_types
# rstan::sampling(stanmodels$gmt, data = standata)
rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
initdata
limit_types
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
limit_types
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
limit_types
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
titers
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
# rstan::sampling(stanmodels$gmt, data = standata)
result <- rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
result
meantiter::mean_titers(titers, "truncated_normal", dilution_stepsize = 0)
rstan::sampling(stanmodels$gmt, data = standata)
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
result
initdata
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
initdata
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
result
result_sampling <- rstan::sampling(stanmodels$gmt, data = standata)
?rstan::sampling
result_sampling <- rstan::sampling(stanmodels$gmt, data = standata, init = list(initdata, initdata, initdata, initdata))
result_sampling <- rstan::sampling(stanmodels$gmt, data = standata, init = list(initdata), chains = 1)
result_sampling <- rstan::sampling(stanmodels$gmt, data = standata, init = list(initdata), chains = 1, show_messages = FALSE)
result_sampling <- rstan::sampling(stanmodels$gmt, data = standata, init = list(initdata), chains = 1, verbose = FALSE)
result_sampling <- rstan::sampling(stanmodels$gmt, data = standata, init = list(initdata), chains = 1, refresh = 0)
result_sampling
curve(dgamma)
curve(dgamma, -1, 10, shape = 3)
?curve
curve(dgamma(x, 3), -1, 10)
curve(dgamma(1/x, 3), -1, 10)
curve(dgamma(1/x, 2), -1, 10)
curve(dgamma(1/x, shape = 2, scale = 0.5), -1, 10)
curve(dgamma(1/x, shape = 2, scale = 0.1), -1, 10)
curve(dgamma(1/x, shape = 2, scale = 1), -1, 10)
curve(dgamma(1/x, shape = 2, scale = 2), -1, 10)
curve(dgamma(1/x, shape = 4, scale = 1), -1, 10)
curve(dgamma(1/x, shape = 3, scale = 1), -1, 10)
curve(dgamma(1/x, shape = 4, scale = 1), -1, 10)
curve(dgamma(1/x, shape = 2, scale = 1), -1, 10)
curve(dgamma(1/x, shape = 2.5, scale = 1), -1, 10)
curve(dgamma(1/x, shape = 2.5, scale = 2), -1, 10)
curve(dgamma(1/x, shape = 2.5, scale = 4), -1, 10)
curve(dgamma(1/x, shape = 2.5, scale = 0.2), -1, 10)
curve(dgamma(1/x, shape = 2, scale = 0.2), -1, 10)
curve(dgamma(1/x, shape = 4, scale = 0.2), -1, 10)
curve(dgamma(1/x, shape = 5, scale = 0.2), -1, 10)
curve(dgamma(1/x, shape = 3, scale = 0.2), -1, 10)
curve(dgamma(1/x, shape = 4, scale = 0.2), -1, 10)
curve(dgamma(1/x, shape = 3.5, scale = 0.2), -1, 10)
curve(dgamma(1/x, shape = 3.5, scale = 0.5), -1, 10)
curve(dgamma(1/x, shape = 2, scale = 0.5), -1, 10)
curve(dgamma(1/x, shape = 3, scale = 0.5), -1, 10)
curve(dgamma(1/x, shape = 3, scale = 0.25), -1, 10)
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
rstantools::rstan_config(); pkgbuild::compile_dll(); devtools::load_all();
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
result
result_sampling$sigma
?sampling
result_sampling
result_sampling@sim
install.packages("rstanarm")
rstanarm::posterior_interval(result_sampling)
rstanarm::posterior_interval(stanmodels$gmt)
confint(result)
result
confint(result_sampling)
rstanarm::predictive_interval(result_sampling)
rstanarm::predictive_interval(result_sampling$mu)
result_sampling$mu
result_sampling@sim$samples
result_sampling@sim$samples[1]
result_sampling@sim$samples[[1]]$mu
rstanarm::posterior_predict(stanmodels$gmt)
rstanarm::posterior_predict(result_sampling)
install.packages("bayestestR")
extract(result_sampling)
rstan::extract(result_sampling)
rstan::extract(result_sampling)$mu
hist(rstan::extract(result_sampling)$mu)
hist(rstan::extract(result_sampling)$sigma)
hist(rstan::extract(result_sampling)$sigma, 40)
?sampling
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
result_sampling <- rstan::sampling(
stanmodels$gmt,
data = standata,
init = list(initdata),
chains = 1,
refresh = 0,
iter = 10000,
warmup = 100
)
result <- rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
hist(rstan::extract(result_sampling)$sigma, 40)
result <- rstan::optimizing(stanmodels$gmt, data = standata, init = initdata)
hist(rstan::extract(result_sampling)$sigma, 40)
sd_draws <- rstan::extract(result_sampling)$sigma
hist(sd_draws, 40)
quantile(sd_draws, c(0.025, 0.975))
abline(h = quantile(sd_draws, c(0.025, 0.975)), lty = 2)
abline(v = quantile(sd_draws, c(0.025, 0.975)), lty = 2)
abline(v = quantile(sd_draws, c(0.025, 0.975)), lty = 2, col = "red", lwd = 2)
install.packages("bayestestR")
install.packages("bayestestR")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
bayestestR::hdi(sd_draws)
abline(v = bayestestR::hdi(sd_draws), lty = 2, col = "blue", lwd = 2)
hist(sd_draws, 40)
abline(v = quantile(sd_draws, c(0.025, 0.975)), lty = 2, col = "red", lwd = 2)
abline(v = bayestestR::hdi(sd_draws), lty = 2, col = "blue", lwd = 2)
bayestestR::hdi(sd_draws)
bayestestR::hdi(sd_draws)[1]
x <- bayestestR::hdi(sd_draws)
x$CI_low
hist(sd_draws, 40)
abline(v = quantile(sd_draws, c(0.025, 0.975)), lty = 2, col = "red", lwd = 2)
abline(v = bayestestR::hdi(sd_draws)[2:3], lty = 2, col = "blue", lwd = 2)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
hist(sd_draws, 40)
abline(v = bayestestR::hdi(sd_draws)[2:3], lty = 2, col = "blue", lwd = 2)
upper_lims
lower_lims
result$par
curve(dgamma(1/x, shape = 3, scale = 0.25), -1, 10)
curve(dgamma(1/x, shape = 0.25, scale = 3), -1, 10)
curve(dgamma(1/x, shape = 3, scale = 0.25), -1, 10)
curve(dgamma(x, shape = 3, scale = 0.25), -1, 10)
install.packages("invgamma")
curve(dgamma(x, shape = 3, scale = 0.25), -1, 10)
curve(invgamma::dinvgamma(x, 3, 0.25), -1, 10)
curve(invgamma::dinvgamma(x, 0.2, 0.25), -1, 10)
curve(invgamma::dinvgamma(x, 0.2, 0.25), 0, 10)
curve(invgamma::dinvgamma(x, 0.1, 0.25), 0, 10)
curve(invgamma::dinvgamma(x, shape = 0.1, rate = 0.5), 0, 10)
curve(invgamma::dinvgamma(x, shape = 0.1, rate = 1), 0, 10)
curve(invgamma::dinvgamma(x, shape = 0.4, rate = 1), 0, 10)
curve(invgamma::dinvgamma(x, shape = 0.4, rate = 0.5), 0, 10)
curve(invgamma::dinvgamma(x, shape = 1, rate = 0.5), 0, 10)
curve(invgamma::dinvgamma(x, shape = 0.1, rate = 0.5), 0, 10)
curve(invgamma::dinvgamma(x, shape = 0.01, rate = 0.5), 0, 10)
curve(invgamma::dinvgamma(x, shape = 0.00001, rate = 0.5), 0, 10)
curve(invgamma::dinvgamma(x, shape = 1, rate = 0.25), 0, 10)
curve(invgamma::dinvgamma(x, shape = 1, rate = 0.5), 0, 10)
curve(invgamma::dinvgamma(x, shape = 1, rate = 1), 0, 10)
curve(invgamma::dinvgamma(x, shape = 1, rate = 2), 0, 10)
curve(invgamma::dinvgamma(x, shape = 1, rate = 3), 0, 10)
curve(invgamma::dinvgamma(x, shape = 1, rate = 2.5), 0, 10)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
hist(sd_draws, 40, xlim = c(0, 12))
hist(sd_draws, 40, xlim = c(0, 12), breaks = 0.2)
hist(sd_draws, 40, xlim = c(0, 12), breaks = seq(from = 0, to = 12, by = 0.25))
hist(sd_draws, 40, xlim = c(0, 12), breaks = seq(from = 0, to = max(sd_draws), by = 0.25))
min(sd_draws_
)
min(sd_draws)
hist(sd_draws, 40, xlim = c(0, 12), breaks = seq(from = 0, to = max(sd_draws)+0.25, by = 0.25))
curve(invgamma::dinvgamma(x, shape = 1, rate = 2.5), 0, 10)
curve(invgamma::dinvgamma(x, shape = 1, rate = 2.5), 0, 10); abline(h = 0)
curve(invgamma::dinvgamma(x, shape = 10, rate = 2.5), 0, 10); abline(h = 0)
curve(invgamma::dinvgamma(x, shape = 1, rate = 2.5), 0, 10); abline(h = 0)
curve(invgamma::dinvgamma(x, shape = 1, rate = 2), 0, 10); abline(h = 0)
curve(invgamma::dinvgamma(x, shape = 0.5, rate = 2.5), 0, 10); abline(h = 0)
curve(invgamma::dinvgamma(x, shape = 10, rate = 2.5), 0, 10); abline(h = 0)
curve(invgamma::dinvgamma(x, shape = 5, rate = 2.5), 0, 10); abline(h = 0)
curve(invgamma::dinvgamma(x, shape = 5, rate = 5), 0, 10); abline(h = 0)
curve(invgamma::dinvgamma(x, shape = 5, rate = 50), 0, 10); abline(h = 0)
curve(invgamma::dinvgamma(x, shape = 5, rate = 20), 0, 10); abline(h = 0)
curve(invgamma::dinvgamma(x, shape = 5, rate = 10), 0, 10); abline(h = 0)
curve(invgamma::dinvgamma(x, shape = 2, rate = 10), 0, 10); abline(h = 0)
curve(invgamma::dinvgamma(x, shape = 2, rate = 5), 0, 10); abline(h = 0)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
hist(sd_draws, 40, xlim = c(0, 12), breaks = seq(from = 0, to = max(sd_draws)+0.25, by = 0.25))
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
hist(sd_draws, 40, xlim = c(0, 12), breaks = seq(from = 0, to = max(sd_draws)+0.25, by = 0.25))
abline(v = bayestestR::hdi(sd_draws)[2:3], lty = 2, col = "blue", lwd = 2)
mean_draws <- rstan::extract(result_sampling)$mu
mean_draws <- rstan::extract(result_sampling)$mu
hist(mean_draws, 40, xlim = c(-5, 12), breaks = seq(from = -5, to = max(mean_draws)+0.25, by = 0.25))
abline(v = bayestestR::hdi(mean_draws)[2:3], lty = 2, col = "blue", lwd = 2)
?bayestestR::hdi
abline(v = bayestestR::hdi(mean_draws, ci = 0.95)[2:3], lty = 2, col = "blue", lwd = 2)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
result$par
result$par["mu"]
result$par["sigma"]
result$par["mu"]
result$par["mu"]
result$par["sigma"]
result$par["mu"]
result$par["sigma"]
result$par["mu"]
result$par["sigma"]
result$par["mu"]
result$theta_tilde
?optimizing
# Optimize parameters
result <- rstan::optimizing(
stanmodels$gmt,
data = standata,
init = initdata,
hessian = TRUE
)
result$hessian
solve(result$hessian)
?switch
covariance_matrix <- solve(result$hessian)
covariance_matrix
alpha <- 1 - level
level = 0.95
alpha <- 1 - level
sqrt(covariance_matrix[1, 1])
covariance_matrix
covariance_matrix
covariance_matrix[1, 1]
sqrt(covariance_matrix[1, 1])
result$hessian
solve(result$hessian)
?optimizing
# Optimize parameters
result <- rstan::optimizing(
stanmodels$gmt,
data = standata,
init = initdata,
hessian = TRUE
)
result$hessian
solve(result$hessian)
result$hessian
solve(result$hessian)
result$hessian
solve(result$hessian)
initdata
solve(result$hessian)
result$hessian
result$par
result$hessian
solve(-result$hessian)
covariance_matrix <- solve(result$hessian)
alpha <- 1 - level
sqrt(-covariance_matrix[1, 1])
qnorm(alpha/2)*mean_sd
covariance_matrix <- solve(result$hessian)
alpha <- 1 - level
mean_sd <- sqrt(-covariance_matrix[1, 1])
qnorm(alpha/2)*mean_sd
result$par
result$par["mu"]
# Save output
output <- list(
mean = result$par["mu"],
sd = result$par["sigma"]
)
covariance_matrix <- solve(result$hessian)
alpha <- 1 - level
mean_sd <- sqrt(-covariance_matrix[1, 1])
qnorm(alpha/2)*mean_sd
level
qnorm(level/2)*mean_sd
alpha <- 1 - level
mean_sd <- sqrt(-covariance_matrix[1, 1])
qnorm(alpha/2)*mean_sd
qnorm(1 - alpha/2)*mean_sd
result_sampling <- rstan::sampling(
stanmodels$gmt,
data = standata,
init = list(initdata),
chains = 1,
refresh = 0,
iter = 10000,
warmup = 500
)
mu_sample <- rstan::extract(result_sampling)$mu
mu_sample
mu_sample <- rstan::extract(result_sampling)$mu
sigma_sample <- rstan::extract(result_sampling)$sigma
sigma_sample
mu_sample_ci <- bayestestR::hdi(mu_sample, ci = level)
sigma_sample_ci <- bayestestR::hdi(sigma_sample, ci = level)
mu_sample_ci
mu_sample_ci$CI_low
# Save output
output <- list(
mean = result$par["mu"],
sd = result$par["sigma"],
mean_lower = NA,
mean_upper = NA,
sd_lower = NA,
sd_upper = NA
)
sigma_sample_ci$CI_low
output$sd_upper <- sigma_sample_ci$CI_high
output$sd_upper
output$sd_lower
output$sd_lower <- sigma_sample_ci$CI_low
output$sd_lower
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
gmt(titers)
gmt(titers)$mean_lower
gmt(titers, ci_type = "sample")$mean_lower
gmt(titers)$mean_upper
gmt(titers, ci_type = "sample")$mean_upper
gmt(titers)$mean_lower
gmt(titers)$mean_upper
ml1 <- gmt(titers)$mean_lower
mu1 <- gmt(titers)$mean_upper
ml2 <- gmt(titers, ci_type = "sample")$mean_lower
mu2 <- gmt(titers, ci_type = "sample")$mean_upper
hist(rnorm(1000, 2, 1))
hist(rnorm(1000, 2, 1), 40)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
?bayestestR::hdi
calc_titer_lims(titers[titers != "*"], 0)
titerlims <- calc_titer_lims(titers[titers != "*"], 0)
Hmisc::smean.cl.normal(titerlims$log_titers)
hm["Lower"]
titerlims <- calc_titer_lims(titers[titers != "*"], 0)
hm <- Hmisc::smean.cl.normal(titerlims$log_titers)
ml3 <- hm["Lower"]
mu3 <- hm["Upper"]
ml3
mu3
abline(v = c(ml3, mu3), lty = 2, col = "green", lwd = 2)
titerTable(map)["D614G", srGroups(map) == "WT convalescent"]
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
?bayestestR::ci
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
round(2^rnorm(4, 2))
round(2^rnorm(200, 4, 2))
round(2^rnorm(200, 4, 2)*10)
as.character(round(2^rnorm(200, 4, 2)*10))
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
titers
calc_titer_lims(titers, 0)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
standata
initdata
rstan::optimizing(
stanmodels$gmt,
data = standata,
init = initdata,
hessian = TRUE
)
rstan::optimizing(
stanmodels$gmt,
data = standata,
init = initdata,
hessian = F
)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
ms1 <- gmt(titers)
ms1$mean
abline(v = ms1$mean, lty = 2, col = "blue", lwd = 1)
abline(v = ms1$mean, lty = 1, col = "blue", lwd = 2)
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
devtools::load_all()
source("~/Dropbox/labbook/packages/titertools/tests/testthat/test-calculating-gmt.R")
