// Generated by rstantools.  Do not edit by hand.

/*
    titertools is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    titertools is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with titertools.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_compare_crossreactivity_breadth_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'compare_crossreactivity_breadth', line 57, column 2 to column 63)",
                                                      " (in 'compare_crossreactivity_breadth', line 58, column 2 to column 29)",
                                                      " (in 'compare_crossreactivity_breadth', line 59, column 2 to column 37)",
                                                      " (in 'compare_crossreactivity_breadth', line 63, column 2 to column 16)",
                                                      " (in 'compare_crossreactivity_breadth', line 64, column 2 to column 22)",
                                                      " (in 'compare_crossreactivity_breadth', line 66, column 2 to column 33)",
                                                      " (in 'compare_crossreactivity_breadth', line 70, column 4 to column 20)",
                                                      " (in 'compare_crossreactivity_breadth', line 71, column 4 to column 20)",
                                                      " (in 'compare_crossreactivity_breadth', line 72, column 4 to column 32)",
                                                      " (in 'compare_crossreactivity_breadth', line 75, column 23 to column 70)",
                                                      " (in 'compare_crossreactivity_breadth', line 74, column 23 to column 42)",
                                                      " (in 'compare_crossreactivity_breadth', line 74, column 4 to line 75, column 70)",
                                                      " (in 'compare_crossreactivity_breadth', line 77, column 4 to column 47)",
                                                      " (in 'compare_crossreactivity_breadth', line 79, column 4 to line 84, column 6)",
                                                      " (in 'compare_crossreactivity_breadth', line 68, column 17 to line 85, column 3)",
                                                      " (in 'compare_crossreactivity_breadth', line 68, column 2 to line 85, column 3)",
                                                      " (in 'compare_crossreactivity_breadth', line 44, column 2 to column 17)",
                                                      " (in 'compare_crossreactivity_breadth', line 45, column 2 to column 21)",
                                                      " (in 'compare_crossreactivity_breadth', line 46, column 2 to column 21)",
                                                      " (in 'compare_crossreactivity_breadth', line 47, column 2 to column 27)",
                                                      " (in 'compare_crossreactivity_breadth', line 48, column 9 to column 10)",
                                                      " (in 'compare_crossreactivity_breadth', line 48, column 2 to column 32)",
                                                      " (in 'compare_crossreactivity_breadth', line 49, column 9 to column 10)",
                                                      " (in 'compare_crossreactivity_breadth', line 49, column 2 to column 32)",
                                                      " (in 'compare_crossreactivity_breadth', line 50, column 9 to column 14)",
                                                      " (in 'compare_crossreactivity_breadth', line 50, column 2 to column 47)",
                                                      " (in 'compare_crossreactivity_breadth', line 51, column 9 to column 14)",
                                                      " (in 'compare_crossreactivity_breadth', line 51, column 2 to column 47)",
                                                      " (in 'compare_crossreactivity_breadth', line 52, column 10 to column 11)",
                                                      " (in 'compare_crossreactivity_breadth', line 52, column 2 to column 13)",
                                                      " (in 'compare_crossreactivity_breadth', line 53, column 10 to column 11)",
                                                      " (in 'compare_crossreactivity_breadth', line 53, column 2 to column 13)",
                                                      " (in 'compare_crossreactivity_breadth', line 54, column 16 to column 17)",
                                                      " (in 'compare_crossreactivity_breadth', line 54, column 2 to column 19)",
                                                      " (in 'compare_crossreactivity_breadth', line 57, column 30 to column 45)",
                                                      " (in 'compare_crossreactivity_breadth', line 58, column 9 to column 14)",
                                                      " (in 'compare_crossreactivity_breadth', line 6, column 2 to column 14)",
                                                      " (in 'compare_crossreactivity_breadth', line 33, column 4 to line 35, column 6)",
                                                      " (in 'compare_crossreactivity_breadth', line 31, column 54 to line 37, column 3)",
                                                      " (in 'compare_crossreactivity_breadth', line 31, column 9 to line 37, column 3)",
                                                      " (in 'compare_crossreactivity_breadth', line 27, column 4 to line 29, column 6)",
                                                      " (in 'compare_crossreactivity_breadth', line 25, column 54 to line 31, column 3)",
                                                      " (in 'compare_crossreactivity_breadth', line 25, column 9 to line 37, column 3)",
                                                      " (in 'compare_crossreactivity_breadth', line 20, column 4 to line 23, column 6)",
                                                      " (in 'compare_crossreactivity_breadth', line 18, column 55 to line 25, column 3)",
                                                      " (in 'compare_crossreactivity_breadth', line 18, column 9 to line 37, column 3)",
                                                      " (in 'compare_crossreactivity_breadth', line 14, column 4 to line 16, column 6)",
                                                      " (in 'compare_crossreactivity_breadth', line 12, column 37 to line 18, column 3)",
                                                      " (in 'compare_crossreactivity_breadth', line 12, column 9 to line 37, column 3)",
                                                      " (in 'compare_crossreactivity_breadth', line 10, column 4 to column 15)",
                                                      " (in 'compare_crossreactivity_breadth', line 8, column 46 to line 12, column 3)",
                                                      " (in 'compare_crossreactivity_breadth', line 8, column 2 to line 37, column 3)",
                                                      " (in 'compare_crossreactivity_breadth', line 39, column 2 to column 16)",
                                                      " (in 'compare_crossreactivity_breadth', line 4, column 89 to line 41, column 1)"};
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
normal_int_censored_likelihood(const T0__& lower_lim, const T1__& upper_lim,
                               const T2__& mu, const T3__& sigma,
                               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ result;
    result = DUMMY_VAR__;
    
    current_statement__ = 52;
    if ((primitive_value(is_inf(lower_lim)) && primitive_value(
        is_inf(upper_lim)))) {
      current_statement__ = 50;
      result = 0;
    } else {
      current_statement__ = 49;
      if (logical_eq(lower_lim, upper_lim)) {
        current_statement__ = 47;
        result = normal_lpdf<false>(lower_lim, mu, sigma);
      } else {
        current_statement__ = 46;
        if ((primitive_value(logical_negation(is_inf(lower_lim))) &&
            primitive_value(logical_negation(is_inf(upper_lim))))) {
          current_statement__ = 44;
          result = log_diff_exp(normal_lcdf(upper_lim, mu, sigma),
                     normal_lcdf(lower_lim, mu, sigma));
        } else {
          current_statement__ = 43;
          if ((primitive_value(logical_negation(is_inf(lower_lim))) &&
              primitive_value(is_inf(upper_lim)))) {
            current_statement__ = 41;
            result = normal_lccdf(lower_lim, mu, sigma);
          } else {
            current_statement__ = 40;
            if ((primitive_value(is_inf(lower_lim)) && primitive_value(
                logical_negation(is_inf(upper_lim))))) {
              current_statement__ = 38;
              result = normal_lcdf(upper_lim, mu, sigma);
            } 
          }
        }
      }
    }
    current_statement__ = 53;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct normal_int_censored_likelihood_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& lower_lim, const T1__& upper_lim, const T2__& mu,
           const T3__& sigma, std::ostream* pstream__)  const 
{
return normal_int_censored_likelihood(lower_lim, upper_lim, mu, sigma,
         pstream__);
}
};
#include <stan_meta_header.hpp>
class model_compare_crossreactivity_breadth final : public model_base_crtp<model_compare_crossreactivity_breadth> {
private:
  int N;
  int N_ags;
  int N_srs;
  int N_sr_groups;
  Eigen::Matrix<double, -1, 1> upper_logtiter_lims;
  Eigen::Matrix<double, -1, 1> lower_logtiter_lims;
  Eigen::Matrix<double, -1, 1> upper_homologous_logtiter_lims;
  Eigen::Matrix<double, -1, 1> lower_homologous_logtiter_lims;
  std::vector<int> ags;
  std::vector<int> srs;
  std::vector<int> sr_groups;
  int sr_group_slopes_1dim__;
 
public:
  ~model_compare_crossreactivity_breadth() { }
  
  inline std::string model_name() const final { return "model_compare_crossreactivity_breadth"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_compare_crossreactivity_breadth(stan::io::var_context& context__,
                                        unsigned int random_seed__ = 0,
                                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_compare_crossreactivity_breadth_namespace::model_compare_crossreactivity_breadth";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 17;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 17;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 17;
      current_statement__ = 17;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 18;
      context__.validate_dims("data initialization","N_ags","int",
          context__.to_vec());
      N_ags = std::numeric_limits<int>::min();
      
      current_statement__ = 18;
      N_ags = context__.vals_i("N_ags")[(1 - 1)];
      current_statement__ = 18;
      current_statement__ = 18;
      check_greater_or_equal(function__, "N_ags", N_ags, 0);
      current_statement__ = 19;
      context__.validate_dims("data initialization","N_srs","int",
          context__.to_vec());
      N_srs = std::numeric_limits<int>::min();
      
      current_statement__ = 19;
      N_srs = context__.vals_i("N_srs")[(1 - 1)];
      current_statement__ = 19;
      current_statement__ = 19;
      check_greater_or_equal(function__, "N_srs", N_srs, 0);
      current_statement__ = 20;
      context__.validate_dims("data initialization","N_sr_groups","int",
          context__.to_vec());
      N_sr_groups = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      N_sr_groups = context__.vals_i("N_sr_groups")[(1 - 1)];
      current_statement__ = 20;
      current_statement__ = 20;
      check_greater_or_equal(function__, "N_sr_groups", N_sr_groups, 0);
      current_statement__ = 21;
      validate_non_negative_index("upper_logtiter_lims", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization","upper_logtiter_lims",
          "double",context__.to_vec(N));
      upper_logtiter_lims = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(upper_logtiter_lims, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> upper_logtiter_lims_flat__;
        current_statement__ = 22;
        assign(upper_logtiter_lims_flat__, nil_index_list(),
          context__.vals_r("upper_logtiter_lims"),
          "assigning variable upper_logtiter_lims_flat__");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 22;
          assign(upper_logtiter_lims,
            cons_list(index_uni(sym1__), nil_index_list()),
            upper_logtiter_lims_flat__[(pos__ - 1)],
            "assigning variable upper_logtiter_lims");
          current_statement__ = 22;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 23;
      validate_non_negative_index("lower_logtiter_lims", "N", N);
      current_statement__ = 24;
      context__.validate_dims("data initialization","lower_logtiter_lims",
          "double",context__.to_vec(N));
      lower_logtiter_lims = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(lower_logtiter_lims, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lower_logtiter_lims_flat__;
        current_statement__ = 24;
        assign(lower_logtiter_lims_flat__, nil_index_list(),
          context__.vals_r("lower_logtiter_lims"),
          "assigning variable lower_logtiter_lims_flat__");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 24;
          assign(lower_logtiter_lims,
            cons_list(index_uni(sym1__), nil_index_list()),
            lower_logtiter_lims_flat__[(pos__ - 1)],
            "assigning variable lower_logtiter_lims");
          current_statement__ = 24;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 25;
      validate_non_negative_index("upper_homologous_logtiter_lims", "N_srs",
                                  N_srs);
      current_statement__ = 26;
      context__.validate_dims("data initialization",
          "upper_homologous_logtiter_lims","double",context__.to_vec(N_srs));
      upper_homologous_logtiter_lims = Eigen::Matrix<double, -1, 1>(N_srs);
      stan::math::fill(upper_homologous_logtiter_lims, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> upper_homologous_logtiter_lims_flat__;
        current_statement__ = 26;
        assign(upper_homologous_logtiter_lims_flat__, nil_index_list(),
          context__.vals_r("upper_homologous_logtiter_lims"),
          "assigning variable upper_homologous_logtiter_lims_flat__");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= N_srs; ++sym1__) {
          current_statement__ = 26;
          assign(upper_homologous_logtiter_lims,
            cons_list(index_uni(sym1__), nil_index_list()),
            upper_homologous_logtiter_lims_flat__[(pos__ - 1)],
            "assigning variable upper_homologous_logtiter_lims");
          current_statement__ = 26;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 27;
      validate_non_negative_index("lower_homologous_logtiter_lims", "N_srs",
                                  N_srs);
      current_statement__ = 28;
      context__.validate_dims("data initialization",
          "lower_homologous_logtiter_lims","double",context__.to_vec(N_srs));
      lower_homologous_logtiter_lims = Eigen::Matrix<double, -1, 1>(N_srs);
      stan::math::fill(lower_homologous_logtiter_lims, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lower_homologous_logtiter_lims_flat__;
        current_statement__ = 28;
        assign(lower_homologous_logtiter_lims_flat__, nil_index_list(),
          context__.vals_r("lower_homologous_logtiter_lims"),
          "assigning variable lower_homologous_logtiter_lims_flat__");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= N_srs; ++sym1__) {
          current_statement__ = 28;
          assign(lower_homologous_logtiter_lims,
            cons_list(index_uni(sym1__), nil_index_list()),
            lower_homologous_logtiter_lims_flat__[(pos__ - 1)],
            "assigning variable lower_homologous_logtiter_lims");
          current_statement__ = 28;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 29;
      validate_non_negative_index("ags", "N", N);
      current_statement__ = 30;
      context__.validate_dims("data initialization","ags","int",
          context__.to_vec(N));
      ags = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 30;
      assign(ags, nil_index_list(), context__.vals_i("ags"),
        "assigning variable ags");
      current_statement__ = 31;
      validate_non_negative_index("srs", "N", N);
      current_statement__ = 32;
      context__.validate_dims("data initialization","srs","int",
          context__.to_vec(N));
      srs = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 32;
      assign(srs, nil_index_list(), context__.vals_i("srs"),
        "assigning variable srs");
      current_statement__ = 33;
      validate_non_negative_index("sr_groups", "N", N);
      current_statement__ = 34;
      context__.validate_dims("data initialization","sr_groups","int",
          context__.to_vec(N));
      sr_groups = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 34;
      assign(sr_groups, nil_index_list(), context__.vals_i("sr_groups"),
        "assigning variable sr_groups");
      current_statement__ = 35;
      sr_group_slopes_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 35;
      sr_group_slopes_1dim__ = (N_sr_groups - 1);
      current_statement__ = 35;
      validate_non_negative_index("sr_group_slopes", "N_sr_groups - 1",
                                  sr_group_slopes_1dim__);
      current_statement__ = 36;
      validate_non_negative_index("ag_folddrops", "N_ags", N_ags);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += sr_group_slopes_1dim__;
      num_params_r__ += N_ags;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_compare_crossreactivity_breadth_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> sr_group_slopes;
      sr_group_slopes = Eigen::Matrix<local_scalar_t__, -1, 1>(sr_group_slopes_1dim__);
      stan::math::fill(sr_group_slopes, DUMMY_VAR__);
      
      current_statement__ = 1;
      sr_group_slopes = in__.vector(sr_group_slopes_1dim__);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= sr_group_slopes_1dim__; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(sr_group_slopes,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(sr_group_slopes[(sym1__ - 1)], 0.01, 2,
              lp__), "assigning variable sr_group_slopes");
        } else {
          current_statement__ = 1;
          assign(sr_group_slopes,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(sr_group_slopes[(sym1__ - 1)], 0.01, 2),
            "assigning variable sr_group_slopes");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> ag_folddrops;
      ag_folddrops = Eigen::Matrix<local_scalar_t__, -1, 1>(N_ags);
      stan::math::fill(ag_folddrops, DUMMY_VAR__);
      
      current_statement__ = 2;
      ag_folddrops = in__.vector(N_ags);
      local_scalar_t__ logtiter_error_sigma;
      logtiter_error_sigma = DUMMY_VAR__;
      
      current_statement__ = 3;
      logtiter_error_sigma = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        logtiter_error_sigma = stan::math::lb_constrain(logtiter_error_sigma,
                                 0, lp__);
      } else {
        current_statement__ = 3;
        logtiter_error_sigma = stan::math::lb_constrain(logtiter_error_sigma,
                                 0);
      }
      {
        local_scalar_t__ folddrop;
        folddrop = DUMMY_VAR__;
        
        local_scalar_t__ sr_group_slope;
        sr_group_slope = DUMMY_VAR__;
        
        current_statement__ = 6;
        lp_accum__.add(normal_lpdf<propto__>(ag_folddrops, 0, 1000));
        current_statement__ = 16;
        for (int i = 1; i <= N; ++i) {
          int ag;
          ag = std::numeric_limits<int>::min();
          
          current_statement__ = 7;
          ag = ags[(i - 1)];
          int sr;
          sr = std::numeric_limits<int>::min();
          
          current_statement__ = 8;
          sr = srs[(i - 1)];
          int sr_group;
          sr_group = std::numeric_limits<int>::min();
          
          current_statement__ = 9;
          sr_group = sr_groups[(i - 1)];
          current_statement__ = 12;
          if (logical_eq(sr_group, 1)) {
            current_statement__ = 11;
            sr_group_slope = 1;
          } else {
            current_statement__ = 10;
            sr_group_slope = sr_group_slopes[((sr_group - 1) - 1)];
          }
          current_statement__ = 13;
          folddrop = (ag_folddrops[(ag - 1)] * sr_group_slope);
          current_statement__ = 14;
          lp_accum__.add(
            normal_int_censored_likelihood(
              (lower_logtiter_lims[(i - 1)] -
                upper_homologous_logtiter_lims[(sr - 1)]),
              (upper_logtiter_lims[(i - 1)] -
                lower_homologous_logtiter_lims[(sr - 1)]), folddrop,
              logtiter_error_sigma, pstream__));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_compare_crossreactivity_breadth_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> sr_group_slopes;
      sr_group_slopes = Eigen::Matrix<double, -1, 1>(sr_group_slopes_1dim__);
      stan::math::fill(sr_group_slopes, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      sr_group_slopes = in__.vector(sr_group_slopes_1dim__);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= sr_group_slopes_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(sr_group_slopes,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(sr_group_slopes[(sym1__ - 1)], 0.01, 2),
          "assigning variable sr_group_slopes");}
      Eigen::Matrix<double, -1, 1> ag_folddrops;
      ag_folddrops = Eigen::Matrix<double, -1, 1>(N_ags);
      stan::math::fill(ag_folddrops, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      ag_folddrops = in__.vector(N_ags);
      double logtiter_error_sigma;
      logtiter_error_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      logtiter_error_sigma = in__.scalar();
      current_statement__ = 3;
      logtiter_error_sigma = stan::math::lb_constrain(logtiter_error_sigma, 0);
      for (int sym1__ = 1; sym1__ <= sr_group_slopes_1dim__; ++sym1__) {
        vars__.emplace_back(sr_group_slopes[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_ags; ++sym1__) {
        vars__.emplace_back(ag_folddrops[(sym1__ - 1)]);}
      vars__.emplace_back(logtiter_error_sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> sr_group_slopes;
      sr_group_slopes = Eigen::Matrix<double, -1, 1>(sr_group_slopes_1dim__);
      stan::math::fill(sr_group_slopes, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sr_group_slopes_flat__;
        current_statement__ = 1;
        assign(sr_group_slopes_flat__, nil_index_list(),
          context__.vals_r("sr_group_slopes"),
          "assigning variable sr_group_slopes_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= sr_group_slopes_1dim__; ++sym1__) {
          current_statement__ = 1;
          assign(sr_group_slopes,
            cons_list(index_uni(sym1__), nil_index_list()),
            sr_group_slopes_flat__[(pos__ - 1)],
            "assigning variable sr_group_slopes");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sr_group_slopes_free__;
      sr_group_slopes_free__ = Eigen::Matrix<double, -1, 1>(sr_group_slopes_1dim__);
      stan::math::fill(sr_group_slopes_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= sr_group_slopes_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(sr_group_slopes_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(sr_group_slopes[(sym1__ - 1)], 0.01, 2),
          "assigning variable sr_group_slopes_free__");}
      Eigen::Matrix<double, -1, 1> ag_folddrops;
      ag_folddrops = Eigen::Matrix<double, -1, 1>(N_ags);
      stan::math::fill(ag_folddrops, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ag_folddrops_flat__;
        current_statement__ = 2;
        assign(ag_folddrops_flat__, nil_index_list(),
          context__.vals_r("ag_folddrops"),
          "assigning variable ag_folddrops_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_ags; ++sym1__) {
          current_statement__ = 2;
          assign(ag_folddrops,
            cons_list(index_uni(sym1__), nil_index_list()),
            ag_folddrops_flat__[(pos__ - 1)],
            "assigning variable ag_folddrops");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      double logtiter_error_sigma;
      logtiter_error_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      logtiter_error_sigma = context__.vals_r("logtiter_error_sigma")[
          (1 - 1)];
      double logtiter_error_sigma_free__;
      logtiter_error_sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      logtiter_error_sigma_free__ = stan::math::lb_free(logtiter_error_sigma,
                                      0);
      for (int sym1__ = 1; sym1__ <= sr_group_slopes_1dim__; ++sym1__) {
        vars__.emplace_back(sr_group_slopes_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_ags; ++sym1__) {
        vars__.emplace_back(ag_folddrops[(sym1__ - 1)]);}
      vars__.emplace_back(logtiter_error_sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("sr_group_slopes");
    names__.emplace_back("ag_folddrops");
    names__.emplace_back("logtiter_error_sigma");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sr_group_slopes_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_ags)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= sr_group_slopes_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sr_group_slopes" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_ags; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ag_folddrops" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "logtiter_error_sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= sr_group_slopes_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sr_group_slopes" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_ags; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ag_folddrops" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "logtiter_error_sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"sr_group_slopes\",\"type\":{\"name\":\"vector\",\"length\":" << sr_group_slopes_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"ag_folddrops\",\"type\":{\"name\":\"vector\",\"length\":" << N_ags << "},\"block\":\"parameters\"},{\"name\":\"logtiter_error_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"sr_group_slopes\",\"type\":{\"name\":\"vector\",\"length\":" << sr_group_slopes_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"ag_folddrops\",\"type\":{\"name\":\"vector\",\"length\":" << N_ags << "},\"block\":\"parameters\"},{\"name\":\"logtiter_error_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_compare_crossreactivity_breadth_namespace::model_compare_crossreactivity_breadth;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_compare_crossreactivity_breadth_namespace::profiles__;
}
#endif
#endif
